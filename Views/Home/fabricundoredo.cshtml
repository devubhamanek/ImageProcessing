<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>resize</title>
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">

    <script src="http://cdnjs.cloudflare.com/ajax/libs/fabric.js/1.5.0/fabric.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script src="http://jcrop-cdn.tapmodo.com/v0.9.12/js/jquery.Jcrop.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
    <script>
        $(document).ready(function () {
            var canvas = new fabric.Canvas('c');
            var drawingModeEl = document.getElementById('drawing-mode'),
                  drawingOptionsEl = document.getElementById('drawing-mode-options'),
                  drawingColorEl = document.getElementById('drawing-color'),
                  drawingLineWidthEl = document.getElementById('drawing-line-width'),
                  drawingShadowWidth = document.getElementById('drawing-shadow-width');

            drawingModeEl.onclick = function () {
                
                if ($(this).hasClass('selected')) {
                    deselectfreedraw($(this));
                } else {
                    $(this).addClass('selected');
                    $('.popfreedraw').slideFadeToggle();
                }
                canvas.isDrawingMode = true;
                //if (canvas.isDrawingMode) {
                //    drawingModeEl.innerHTML = 'Cancel drawing mode';
                //    drawingOptionsEl.style.display = '';
                //}
                //else {
                //    drawingModeEl.innerHTML = 'Enter drawing mode';
                //    drawingOptionsEl.style.display = 'none';
                //}
            };
            $.fn.slideFadeToggle = function (easing, callback) {
                return this.animate({ opacity: 'toggle', height: 'toggle' }, 'fast', easing, callback);
            };
            function deselectfreedraw(e) {
                $('.popfreedraw').slideFadeToggle(function () {
                    e.removeClass('selected');
                });
            }

            $("#Ffreedraw").click(function () {
                deselectfreedraw($('#freedraw'));
            });

            $("#Cfreedraw").click(function () {
                deselectfreedraw($('#freedraw'));
            });
            //canvas.on('path:created', function () {
            //    updateComplexity();
            //});

            if (fabric.PatternBrush) {
                var vLinePatternBrush = new fabric.PatternBrush(canvas);
                vLinePatternBrush.getPatternSrc = function () {

                    var patternCanvas = fabric.document.createElement('canvas');
                    patternCanvas.width = patternCanvas.height = 10;
                    var ctx = patternCanvas.getContext('2d');

                    ctx.strokeStyle = this.color;
                    ctx.lineWidth = 5;
                    ctx.beginPath();
                    ctx.moveTo(0, 5);
                    ctx.lineTo(10, 5);
                    ctx.closePath();
                    ctx.stroke();

                    return patternCanvas;
                };

                var hLinePatternBrush = new fabric.PatternBrush(canvas);
                hLinePatternBrush.getPatternSrc = function () {

                    var patternCanvas = fabric.document.createElement('canvas');
                    patternCanvas.width = patternCanvas.height = 10;
                    var ctx = patternCanvas.getContext('2d');

                    ctx.strokeStyle = this.color;
                    ctx.lineWidth = 5;
                    ctx.beginPath();
                    ctx.moveTo(5, 0);
                    ctx.lineTo(5, 10);
                    ctx.closePath();
                    ctx.stroke();

                    return patternCanvas;
                };

                var squarePatternBrush = new fabric.PatternBrush(canvas);
                squarePatternBrush.getPatternSrc = function () {

                    var squareWidth = 10, squareDistance = 2;

                    var patternCanvas = fabric.document.createElement('canvas');
                    patternCanvas.width = patternCanvas.height = squareWidth + squareDistance;
                    var ctx = patternCanvas.getContext('2d');

                    ctx.fillStyle = this.color;
                    ctx.fillRect(0, 0, squareWidth, squareWidth);

                    return patternCanvas;
                };

                var diamondPatternBrush = new fabric.PatternBrush(canvas);
                diamondPatternBrush.getPatternSrc = function () {

                    var squareWidth = 10, squareDistance = 5;
                    var patternCanvas = fabric.document.createElement('canvas');
                    var rect = new fabric.Rect({
                        width: squareWidth,
                        height: squareWidth,
                        angle: 45,
                        fill: this.color
                    });

                    var canvasWidth = rect.getBoundingRectWidth();

                    patternCanvas.width = patternCanvas.height = canvasWidth + squareDistance;
                    rect.set({ left: canvasWidth / 2, top: canvasWidth / 2 });

                    var ctx = patternCanvas.getContext('2d');
                    rect.render(ctx);

                    return patternCanvas;
                };

                var img = new Image();
                img.src = '../assets/honey_im_subtle.png';

                var texturePatternBrush = new fabric.PatternBrush(canvas);
                texturePatternBrush.source = img;
            }

            document.getElementById('drawing-mode-selector').addEventListener('change', function () {

                if (this.value === 'hline') {
                    canvas.freeDrawingBrush = vLinePatternBrush;
                }
                else if (this.value === 'vline') {
                    canvas.freeDrawingBrush = hLinePatternBrush;
                }
                else if (this.value === 'square') {
                    canvas.freeDrawingBrush = squarePatternBrush;
                }
                else if (this.value === 'diamond') {
                    canvas.freeDrawingBrush = diamondPatternBrush;
                }
                else if (this.value === 'texture') {
                    canvas.freeDrawingBrush = texturePatternBrush;
                }
                else {
                    canvas.freeDrawingBrush = new fabric[this.value + 'Brush'](canvas);
                }

                if (canvas.freeDrawingBrush) {
                    canvas.freeDrawingBrush.color = drawingColorEl.value;
                    canvas.freeDrawingBrush.width = parseInt(drawingLineWidthEl.value, 10) || 1;
                    canvas.freeDrawingBrush.shadowBlur = parseInt(drawingShadowWidth.value, 10) || 0;
                }
            });

            drawingColorEl.onchange = function () {
                canvas.freeDrawingBrush.color = drawingColorEl.value;
            };
            drawingLineWidthEl.onchange = function () {
                canvas.freeDrawingBrush.width = parseInt(drawingLineWidthEl.value, 10) || 1;
            };
            drawingShadowWidth.onchange = function () {
                canvas.freeDrawingBrush.shadowBlur = parseInt(drawingShadowWidth.value, 10) || 0;
            };

            if (canvas.freeDrawingBrush) {
                canvas.freeDrawingBrush.color = drawingColorEl.value;
                canvas.freeDrawingBrush.width = parseInt(drawingLineWidthEl.value, 10) || 1;
                canvas.freeDrawingBrush.shadowBlur = 0;
            }

            document.getElementById('canvas-background-picker').addEventListener('change', function () {
                canvas.backgroundColor = this.value;
                canvas.renderAll();
            });

        });
    </script>
    <style type="text/css">
     
        .messagepopfreedraw {
            background-color: #FFFFFF;
            border: 1px solid #999999;
            cursor: default;
            display: none;
            /*margin-top: 276px;*/
            /*margin-left: 691px;*/
            position: absolute;
            text-align: left;
            /*width: 394px;*/
            z-index: 50;
            padding: 25px 25px 20px;
        }
    </style>

</head>
<body>
    <canvas style="left: -300px; border: 2px solid; " height="485" width="632" id="c"></canvas>
    <li style="margin-top:10px;">
        <button id="drawing-mode" class="btn btn-info">Enter drawing mode</button>
       
        
    </li>
    
        <div class="messagepopfreedraw popfreedraw">
            <label for="drawing-mode-selector">Mode:</label>
            <select id="drawing-mode-selector">
                <option>Pencil</option>
                <option>Circle</option>
                <option>Spray</option>
                <option>Pattern</option>

                <option>hline</option>
                <option>vline</option>
                <option>square</option>
                <option>diamond</option>
                <option>texture</option>
            </select><br>
            <label for="drawing-line-width">Line width:</label>
            <input type="range" value="30" min="0" max="150" id="drawing-line-width"><br>
            <label for="drawing-color">Line color:</label>
            <input type="color" value="#005E7A" id="drawing-color"><br>
            <label for="drawing-shadow-width">Line shadow width:</label>
            <input type="range" value="0" min="0" max="50" id="drawing-shadow-width"><br>


            <p><button id="Ffreedraw" class="btn btn-info btn-sm">Apply</button> <button id="Cfreedraw" class="btn btn-info btn-sm">Cancle</button></p>
        </div>
</body>
</html>